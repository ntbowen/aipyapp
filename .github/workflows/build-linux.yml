name: Build Linux Executables

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        include:
          - os: ubuntu-22.04
            platform: ubuntu-22.04
          - os: ubuntu-24.04
            platform: ubuntu-24.04
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            python3-pip \
            build-essential \
            zlib1g-dev \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Project Dependencies
        run: |
          # 安装 GUI 依赖和系统 Python GI 绑定
          sudo apt-get install -y \
            libgtk-3-dev \
            libnotify-dev \
            libsdl2-dev \
            libwebkit2gtk-4.0-dev \
            gir1.2-webkit2-4.0 \
            python3-gi \
            python3-gi-cairo \
            gir1.2-gtk-3.0
          
          uv sync --all-extras
          uv pip install pyinstaller wxPython
          
          # 链接系统的 gi 到虚拟环境
          SITE_PACKAGES=$(uv run python -c "import site; print(site.getsitepackages()[0])")
          ln -sf /usr/lib/python3/dist-packages/gi $SITE_PACKAGES/
          ln -sf /usr/lib/python3/dist-packages/*gi*.so $SITE_PACKAGES/ 2>/dev/null || true
          ln -sf /usr/lib/python3/dist-packages/_gi*.so $SITE_PACKAGES/ 2>/dev/null || true

      - name: Build with PyInstaller (CLI)
        run: |
          # 创建启动脚本并修补 aipyapp 的 bug，默认启动 GUI
          cat > run_aipy.py << 'EOF'
          import sys
          
          # 修补 aipyapp 代码中的 bug
          def patch_aipyapp():
              """修补 aipyapp.__main__ 中 args.gui 属性缺失的问题"""
              import aipyapp.__main__ as main_module
              
              original_init_settings = main_module.init_settings
              
              def patched_init_settings(conf, args):
                  # 确保 args 有 gui 属性
                  if not hasattr(args, 'gui'):
                      command = getattr(args, 'command', None)
                      args.gui = (command == 'gui')
                  return original_init_settings(conf, args)
              
              main_module.init_settings = patched_init_settings
          
          if __name__ == '__main__':
              # 如果没有参数，默认启动 GUI
              if len(sys.argv) == 1:
                  sys.argv.append('gui')
              
              patch_aipyapp()
              from aipyapp.__main__ import main
              sys.exit(main())
          EOF
          
          uv run pyinstaller \
            --onefile \
            --name aipy-linux-${{ matrix.platform }} \
            --windowed \
            --hidden-import aipyapp \
            --hidden-import anthropic \
            --hidden-import openai \
            --hidden-import pandas \
            --hidden-import fastapi \
            --hidden-import rich \
            --hidden-import prompt_toolkit \
            --hidden-import term_image \
            --hidden-import qrcode \
            --hidden-import loguru \
            --hidden-import questionary \
            --hidden-import dynaconf \
            --hidden-import beautifulsoup4 \
            --hidden-import mcp \
            --hidden-import wx \
            --hidden-import wx.core \
            --hidden-import wx.lib \
            --hidden-import gi \
            --hidden-import gi.repository \
            --collect-all aipyapp \
            --collect-all wx \
            --collect-all gi \
            run_aipy.py

      - name: Test Executable
        run: |
          ./dist/aipy-linux-${{ matrix.platform }} --version || echo "Version check complete"
          ./dist/aipy-linux-${{ matrix.platform }} --help

      - name: Package Executable
        run: |
          cd dist
          tar -czf aipy-linux-${{ matrix.platform }}.tar.gz aipy-linux-${{ matrix.platform }}
          sha256sum aipy-linux-${{ matrix.platform }}.tar.gz > aipy-linux-${{ matrix.platform }}.tar.gz.sha256

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aipy-linux-${{ matrix.platform }}
          path: |
            dist/aipy-linux-${{ matrix.platform }}.tar.gz
            dist/aipy-linux-${{ matrix.platform }}.tar.gz.sha256

      - name: Upload to GitHub Releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/aipy-linux-${{ matrix.platform }}.tar.gz
            dist/aipy-linux-${{ matrix.platform }}.tar.gz.sha256
          token: ${{ secrets.GITHUB_TOKEN }}

  build-appimage:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            python3-pip \
            build-essential \
            zlib1g-dev \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev \
            fuse \
            libfuse2 \
            file \
            wget

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          # 安装 GUI 依赖和系统 Python GI 绑定
          sudo apt-get install -y \
            libgtk-3-dev \
            libnotify-dev \
            libsdl2-dev \
            libwebkit2gtk-4.0-dev \
            gir1.2-webkit2-4.0 \
            python3-gi \
            python3-gi-cairo \
            gir1.2-gtk-3.0
          
          uv sync --all-extras
          uv pip install pyinstaller wxPython
          
          # 链接系统的 gi 到虚拟环境
          SITE_PACKAGES=$(uv run python -c "import site; print(site.getsitepackages()[0])")
          ln -sf /usr/lib/python3/dist-packages/gi $SITE_PACKAGES/
          ln -sf /usr/lib/python3/dist-packages/*gi*.so $SITE_PACKAGES/ 2>/dev/null || true
          ln -sf /usr/lib/python3/dist-packages/_gi*.so $SITE_PACKAGES/ 2>/dev/null || true

      - name: Build with PyInstaller
        run: |
          # 创建启动脚本并修补 aipyapp 的 bug，默认启动 GUI
          cat > run_aipy.py << 'EOF'
          import sys
          
          # 修补 aipyapp 代码中的 bug
          def patch_aipyapp():
              """修补 aipyapp.__main__ 中 args.gui 属性缺失的问题"""
              import aipyapp.__main__ as main_module
              
              original_init_settings = main_module.init_settings
              
              def patched_init_settings(conf, args):
                  # 确保 args 有 gui 属性
                  if not hasattr(args, 'gui'):
                      command = getattr(args, 'command', None)
                      args.gui = (command == 'gui')
                  return original_init_settings(conf, args)
              
              main_module.init_settings = patched_init_settings
          
          if __name__ == '__main__':
              # 如果没有参数，默认启动 GUI
              if len(sys.argv) == 1:
                  sys.argv.append('gui')
              
              patch_aipyapp()
              from aipyapp.__main__ import main
              sys.exit(main())
          EOF
          
          # 构建单文件可执行（GUI 模式）
          uv run pyinstaller \
            --onefile \
            --name aipy \
            --windowed \
            --hidden-import aipyapp \
            --hidden-import anthropic \
            --hidden-import openai \
            --hidden-import pandas \
            --hidden-import fastapi \
            --hidden-import rich \
            --hidden-import prompt_toolkit \
            --hidden-import term_image \
            --hidden-import qrcode \
            --hidden-import loguru \
            --hidden-import questionary \
            --hidden-import dynaconf \
            --hidden-import beautifulsoup4 \
            --hidden-import mcp \
            --hidden-import wx \
            --hidden-import wx.core \
            --hidden-import wx.lib \
            --hidden-import gi \
            --hidden-import gi.repository \
            --collect-all aipyapp \
            --collect-all wx \
            --collect-all gi \
            run_aipy.py

      - name: Download appimagetool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Create AppImage Structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # 复制可执行文件
          cp dist/aipy AppDir/usr/bin/
          
          # 创建简单图标（文本格式）
          cat > AppDir/aipy.png << 'EOF'
          iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==
          EOF
          base64 -d AppDir/aipy.png > AppDir/.aipy.png.tmp && mv AppDir/.aipy.png.tmp AppDir/aipy.png || true
          
          # 创建 desktop 文件（AppImage 需要在根目录）
          cat > AppDir/aipy.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=AIPy - AI Python Assistant
          Comment=AI-Powered Python environment
          Exec=aipy
          Icon=aipy
          Categories=Development;Utility;
          Terminal=false
          EOF
          
          # 也复制到标准位置
          cp AppDir/aipy.desktop AppDir/usr/share/applications/
          
          # 创建 AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/aipy" "$@"
          EOF
          chmod +x AppDir/AppRun

      - name: Build AppImage
        run: |
          # Extract appimagetool for CI environment (no FUSE)
          ./appimagetool-x86_64.AppImage --appimage-extract
          
          # Verify AppDir structure
          echo "AppDir structure:"
          ls -la AppDir/
          
          # Build AppImage (disable desktop file validation for CI)
          ARCH=x86_64 squashfs-root/AppRun --no-appstream AppDir aipy-x86_64.AppImage
          chmod +x aipy-x86_64.AppImage
          sha256sum aipy-x86_64.AppImage > aipy-x86_64.AppImage.sha256
          
          # Check file size
          ls -lh aipy-x86_64.AppImage

      - name: Test AppImage
        run: |
          ./aipy-x86_64.AppImage --version || echo "AppImage test complete"
          ./aipy-x86_64.AppImage --help

      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aipy-appimage
          path: |
            aipy-x86_64.AppImage
            aipy-x86_64.AppImage.sha256

      - name: Upload AppImage to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            aipy-x86_64.AppImage
            aipy-x86_64.AppImage.sha256
          token: ${{ secrets.GITHUB_TOKEN }}

  build-rpm-deb:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ruby \
            ruby-dev \
            rubygems \
            rpm \
            build-essential
          sudo gem install --no-document fpm

      - name: Install Project
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            python3-pip \
            build-essential \
            zlib1g-dev \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev
          
          # 安装 GUI 依赖和系统 Python GI 绑定
          sudo apt-get install -y \
            libgtk-3-dev \
            libnotify-dev \
            libsdl2-dev \
            libwebkit2gtk-4.0-dev \
            gir1.2-webkit2-4.0 \
            python3-gi \
            python3-gi-cairo \
            gir1.2-gtk-3.0
          
          uv sync --all-extras
          uv pip install pyinstaller wxPython
          
          # 链接系统的 gi 到虚拟环境
          SITE_PACKAGES=$(uv run python -c "import site; print(site.getsitepackages()[0])")
          ln -sf /usr/lib/python3/dist-packages/gi $SITE_PACKAGES/
          ln -sf /usr/lib/python3/dist-packages/*gi*.so $SITE_PACKAGES/ 2>/dev/null || true
          ln -sf /usr/lib/python3/dist-packages/_gi*.so $SITE_PACKAGES/ 2>/dev/null || true
          
          uv build

      - name: Build PyInstaller Executable for Packaging
        run: |
          # 创建启动脚本并修补 aipyapp 的 bug，默认启动 GUI
          cat > run_aipy.py << 'EOF'
          import sys
          
          # 修补 aipyapp 代码中的 bug
          def patch_aipyapp():
              """修补 aipyapp.__main__ 中 args.gui 属性缺失的问题"""
              import aipyapp.__main__ as main_module
              
              original_init_settings = main_module.init_settings
              
              def patched_init_settings(conf, args):
                  # 确保 args 有 gui 属性
                  if not hasattr(args, 'gui'):
                      command = getattr(args, 'command', None)
                      args.gui = (command == 'gui')
                  return original_init_settings(conf, args)
              
              main_module.init_settings = patched_init_settings
          
          if __name__ == '__main__':
              # 如果没有参数，默认启动 GUI
              if len(sys.argv) == 1:
                  sys.argv.append('gui')
              
              patch_aipyapp()
              from aipyapp.__main__ import main
              sys.exit(main())
          EOF
          
          # 构建单文件可执行（GUI 模式）
          uv run pyinstaller \
            --onefile \
            --name aipy \
            --windowed \
            --hidden-import aipyapp \
            --hidden-import anthropic \
            --hidden-import openai \
            --hidden-import pandas \
            --hidden-import fastapi \
            --hidden-import rich \
            --hidden-import prompt_toolkit \
            --hidden-import term_image \
            --hidden-import qrcode \
            --hidden-import loguru \
            --hidden-import questionary \
            --hidden-import dynaconf \
            --hidden-import beautifulsoup4 \
            --hidden-import mcp \
            --hidden-import wx \
            --hidden-import wx.core \
            --hidden-import wx.lib \
            --hidden-import gi \
            --hidden-import gi.repository \
            --collect-all aipyapp \
            --collect-all wx \
            --collect-all gi \
            run_aipy.py

      - name: Create DEB Package
        run: |
          mkdir -p package/usr/local/bin
          mkdir -p package/usr/share/applications
          mkdir -p package/usr/share/doc/aipyapp
          mkdir -p package/usr/share/pixmaps
          
          # 使用 PyInstaller 生成的单文件可执行
          cp dist/aipy package/usr/local/bin/aipy
          chmod +x package/usr/local/bin/aipy
          
          # 创建 desktop 文件（GUI 模式）
          cat > package/usr/share/applications/aipyapp.desktop << 'EOF'
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=AIPy
          GenericName=AI Python Assistant
          Comment=AI-Powered Python environment for data analysis and automation
          Exec=/usr/local/bin/aipy
          Terminal=false
          Categories=Development;Utility;
          Keywords=python;ai;assistant;automation;gui;
          EOF
          
          # 创建简单的 README
          cat > package/usr/share/doc/aipyapp/README << 'EOF'
          AIPy - AI-Powered Python Assistant
          
          Usage:
            aipy              - Start in task mode
            aipy --python     - Start in Python mode
            aipy --help       - Show help
          
          Configuration: ~/.aipyapp/aipyapp.toml
          Documentation: https://github.com/knownsec/aipyapp
          EOF
          
          # 获取版本号
          VERSION=$(uv run python -c "import aipyapp; print(aipyapp.__version__)" 2>/dev/null || echo "0.3.0")
          echo "Package version: $VERSION"
          
          # 测试可执行文件
          echo "Testing executable..."
          package/usr/local/bin/aipy --version || echo "Version check complete"
          
          # Create .deb
          fpm -s dir -t deb \
            -n aipyapp \
            -v "$VERSION" \
            --description "AI-Powered Python & Python-Powered AI (standalone executable)" \
            --url "https://github.com/ntbowen/aipyapp" \
            --maintainer "ntbowen <ntbowen@users.noreply.github.com>" \
            --license "Apache-2.0" \
            --category "devel" \
            -C package \
            usr/local/bin/aipy=/usr/local/bin/aipy \
            usr/share/applications/aipyapp.desktop=/usr/share/applications/aipyapp.desktop \
            usr/share/doc/aipyapp/README=/usr/share/doc/aipyapp/README

      - name: Create RPM Package
        run: |
          # 获取版本号
          VERSION=$(uv run python -c "import aipyapp; print(aipyapp.__version__)" 2>/dev/null || echo "0.3.0")
          
          fpm -s dir -t rpm \
            -n aipyapp \
            -v "$VERSION" \
            --description "AI-Powered Python & Python-Powered AI (standalone executable)" \
            --url "https://github.com/ntbowen/aipyapp" \
            --maintainer "ntbowen <ntbowen@users.noreply.github.com>" \
            --license "Apache-2.0" \
            --category "Development/Tools" \
            -C package \
            usr/local/bin/aipy=/usr/local/bin/aipy \
            usr/share/applications/aipyapp.desktop=/usr/share/applications/aipyapp.desktop \
            usr/share/doc/aipyapp/README=/usr/share/doc/aipyapp/README

      - name: Upload DEB/RPM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aipy-packages
          path: |
            *.deb
            *.rpm

      - name: Upload Packages to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.deb
            *.rpm
          token: ${{ secrets.GITHUB_TOKEN }}
